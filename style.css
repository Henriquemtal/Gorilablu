/* public/style.css - VersÃ£o Otimizada e WhatsApp-like - FINAL v4 */

:root {
    /* Cores Inspiradas no WhatsApp e profissionais */
    --whatsapp-green-light: #dcf8c6; /* Cor da bolha do usuÃ¡rio */
    --whatsapp-green-dark: #075e54; /* Cor para cabeÃ§alhos e botÃµes principais */
    --whatsapp-bubble-bot: #ffffff; /* Cor da bolha do bot */
    --whatsapp-background-chat: #e5ddd5; /* Cor de fundo do chat */
    --whatsapp-text-dark: #333333;
    --whatsapp-text-light: #555555;

    --primary-color: #007bff; /* Azul forte para o cabeÃ§alho do chat */
    --user-bubble-color: #25d366; /* Verde do WhatsApp para mensagens do usuÃ¡rio */
    --bot-bubble-color: #ffffff; /* Branco para mensagens do bot */
    --chat-bg-color: #f0f2f5; /* Fundo do chat, mais neutro */

    --font-family: 'Inter', sans-serif;
    --border-radius-main: 18px;
    --shadow-main: 0 12px 35px rgba(0, 0, 0, 0.25);

    /* Cores para o efeito Neon do botÃ£o de iniciar (ajustado para ser um verde mais vibrante) */
    --neon-glow-color: #39ff14; /* Verde neon mais "elÃ©trico" */
    --neon-text-color: #000000; /* Texto preto para contraste com neon */
}

/* OtimizaÃ§Ã£o para Tela Cheia */
html, body {
    height: 100%;
    width: 100%;
    margin: 0;
    padding: 0;
    overflow: hidden; /* Evita scroll no body */
}

body {
    font-family: var(--font-family);
    display: flex;
    justify-content: center;
    align-items: center;
    background: linear-gradient(to bottom right, #f2f7f9, #d0e7f0); /* Gradiente suave para o fundo */
    color: var(--whatsapp-text-dark);
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
}

.chat-container-wrapper {
    background-color: var(--bot-bubble-color);
    border-radius: var(--border-radius-main);
    box-shadow: var(--shadow-main);
    width: 100%; /* Ocupa 100% da largura em mobile */
    height: 100%; /* Ocupa 100% da altura em mobile */
    max-width: 450px; /* MantÃ©m largura mÃ¡xima em desktop */
    max-height: 700px; /* MantÃ©m altura mÃ¡xima em desktop */
    display: flex;
    flex-direction: column;
    overflow: hidden;
    margin: 0; /* Remove margem para ocupar tela cheia */
    border: none; /* Remove borda */
    position: relative; /* Para posicionar as telas */
}

/* Telas de Boas-Vindas e Chat */
.welcome-screen, .chat-screen {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: var(--bot-bubble-color);
    display: flex;
    flex-direction: column;
    justify-content: flex-start; /* Alinha o conteÃºdo ao topo */
    align-items: center;
    transition: transform 0.5s ease-in-out; /* TransiÃ§Ã£o suave entre telas */
    box-sizing: border-box; /* Garante que padding nÃ£o estoure */
    padding: 0; /* Removido padding direto aqui, serÃ¡ nas seÃ§Ãµes internas */
    overflow-y: auto; /* Permite rolagem na pÃ¡gina de boas-vindas */
}

.welcome-screen.active {
    transform: translateX(0);
    z-index: 2; /* Fica por cima */
}
.welcome-screen.hidden {
    transform: translateX(-100%);
    opacity: 0;
    pointer-events: none; /* NÃ£o interage quando oculto */
}

.chat-screen.active {
    transform: translateX(0);
    z-index: 1; /* Fica por baixo, mas visÃ­vel */
    display: flex; /* Garante que o chat-screen seja flex */
}
.chat-screen.hidden {
    transform: translateX(100%);
    opacity: 0;
    pointer-events: none;
}

/* ConteÃºdo da Tela de Boas-Vindas */
.welcome-content {
    display: flex;
    flex-direction: column;
    align-items: center;
    width: 100%;
    padding: 20px; /* Padding para o conteÃºdo da welcome screen */
    box-sizing: border-box;
    flex-grow: 1; /* Para o conteÃºdo esticar e o botÃ£o ficar no final */
    justify-content: space-between; /* EspaÃ§amento entre seÃ§Ãµes */
    position: relative; /* Para o botÃ£o flutuante funcionar */
}

.welcome-section-1, .welcome-section-2 {
    background-color: #f8f8f8; /* Fundo suave para as seÃ§Ãµes */
    border-radius: 10px;
    padding: 20px;
    margin-bottom: 15px; /* EspaÃ§o entre seÃ§Ãµes */
    width: 100%;
    box-sizing: border-box;
    text-align: center;
    box-shadow: 0 2px 5px rgba(0,0,0,0.05);
}

.money-emoji {
    font-size: 3em;
    margin-bottom: 10px;
    line-height: 1;
}

.welcome-content h1 {
    font-size: 1.6em;
    color: var(--primary-color);
    margin: 0 0 5px;
    font-weight: 700;
}

.welcome-content .subtitle {
    font-size: 1.1em;
    color: var(--whatsapp-text-dark);
    margin: 0 0 15px;
    font-weight: 500;
}

.welcome-content .description {
    font-size: 0.9em;
    color: var(--whatsapp-text-light);
    line-height: 1.4;
    margin-bottom: 0;
}

.divider {
    width: 80%;
    height: 1px;
    background-color: #eee;
    margin: 15px 0;
}

.welcome-avatar {
    width: 60px;
    height: 60px;
    background-color: #f7b731; /* Cor para o avatar da AmÃ©lia na welcome screen */
    border-radius: 50%;
    display: flex;
    justify-content: center;
    align-items: center;
    font-size: 30px;
    color: #fff;
    margin: 0 auto 15px;
    box-shadow: 0 3px 10px rgba(0, 0, 0, 0.1);
}

.agent-intro {
    font-size: 1.1em;
    font-weight: 600;
    color: var(--primary-color);
    margin-bottom: 10px;
}

.offer-details {
    font-size: 0.95em;
    color: var(--whatsapp-text-dark);
    line-height: 1.5;
    margin-bottom: 0;
}

.benefit-list {
    list-style: none;
    padding: 0;
    margin: 15px 0;
    width: 100%;
    text-align: left; /* Alinha os itens da lista Ã  esquerda */
    flex-shrink: 0; /* NÃ£o permite encolher esta lista */
}

.benefit-list li {
    background-color: #e6ffe6; /* Fundo verde claro para os itens da lista */
    border-left: 5px solid var(--neon-glow-color); /* Barra verde neon na esquerda */
    padding: 10px 15px;
    margin-bottom: 8px;
    border-radius: 8px;
    font-size: 0.9em;
    color: var(--whatsapp-text-dark);
    display: flex;
    align-items: center;
    box-shadow: 0 1px 3px rgba(0,0,0,0.05);
}

.benefit-list li i {
    color: var(--neon-glow-color);
    margin-right: 10px;
    font-size: 1.1em;
}

.attention-text {
    font-size: 1em;
    font-weight: 600;
    color: #cc0000; /* Vermelho para atenÃ§Ã£o */
    text-align: center;
    margin-top: 15px;
    margin-bottom: 25px;
}

/* Estilo para o NOVO botÃ£o secundÃ¡rio */
.secondary-start-button {
    background-color: transparent; /* Fundo transparente */
    color: var(--primary-color); /* Texto azul */
    border: 2px solid var(--primary-color); /* Borda azul */
    padding: 12px 20px;
    border-radius: 25px;
    font-size: 1em;
    font-weight: 600;
    cursor: pointer;
    transition: background-color 0.3s ease, color 0.3s ease, transform 0.2s ease;
    margin-top: 20px; /* EspaÃ§amento apÃ³s a seÃ§Ã£o AmÃ©lia */
    width: 100%;
    max-width: calc(100% - 40px); /* Ajusta para padding da welcome-content */
    box-sizing: border-box;
    align-self: center; /* Centraliza */
    flex-shrink: 0; /* NÃ£o permite encolher */
}

.secondary-start-button:hover {
    background-color: var(--primary-color);
    color: #fff;
    transform: translateY(-2px);
}

.secondary-start-button:active {
    transform: translateY(0);
}

/* BotÃ£o principal de SIMULAR AGORA MESMO */
.start-button {
    background-color: var(--neon-glow-color); /* Cor de base neon */
    color: var(--neon-text-color);
    border: none;
    padding: 15px 25px;
    border-radius: 30px; /* Bem arredondado */
    font-size: 1.1em;
    font-weight: 600;
    cursor: pointer;
    transition: all 0.3s ease;
    text-shadow: 0 0 5px rgba(0,0,0,0.3); /* Sombra no texto */
    margin-top: 25px; /* EspaÃ§amento apÃ³s a seÃ§Ã£o de atenÃ§Ã£o */
    margin-bottom: 0; /* Ajustado para o texto de seguranÃ§a */
    line-height: 1.4;
    text-align: center;
    width: 100%; /* Ocupa largura total */
    box-sizing: border-box; /* Inclui padding e borda no width */
    display: flex; /* Para centralizar Ã­cones */
    align-items: center;
    justify-content: center;
    gap: 10px; /* EspaÃ§amento entre texto e Ã­cones */

    /* Efeito de botÃ£o flutuante no rodapÃ© da welcome screen */
    position: sticky; /* Sticky para seÃ§Ãµes que podem rolar */
    bottom: 20px; /* DistÃ¢ncia do fundo */
    z-index: 10; /* Garante que fique acima de outros elementos */
    left: 50%; /* Centraliza horizontalmente */
    transform: translateX(-50%); /* Ajuste fino para centralizaÃ§Ã£o */
    max-width: calc(100% - 40px); /* Ajusta para padding da welcome-content */
    
    /* Importante para o sticky funcionar */
    align-self: center; /* Centraliza o item flex */
    flex-shrink: 0; /* Impede que ele encolha */
}


/* Efeito Neon para o BotÃ£o */
.neon-effect {
    box-shadow: 0 0 5px var(--neon-glow-color),
                0 0 15px var(--neon-glow-color),
                0 0 30px var(--neon-glow-color),
                0 0 45px var(--neon-glow-color); /* MÃºltiplas sombras para o brilho */
    animation: pulse-neon 1.5s infinite alternate; /* AnimaÃ§Ã£o de pulso */
}

@keyframes pulse-neon {
    from {
        box-shadow: 0 0 5px var(--neon-glow-color),
                    0 0 10px var(--neon-glow-color),
                    0 0 20px var(--neon-glow-color);
    }
    to {
        box-shadow: 0 0 8px var(--neon-glow-color),
                    0 0 20px var(--neon-glow-color),
                    0 0 40px var(--neon-glow-color),
                    0 0 60px var(--neon-glow-color);
    }
}

.start-button:hover {
    transform: translateY(-2px) translateX(-50%); /* MantÃ©m a translaÃ§Ã£o X */
    box-shadow: 0 0 8px var(--neon-glow-color),
                0 0 20px var(--neon-glow-color),
                0 0 40px var(--neon-glow-color),
                0 0 60px var(--neon-glow-color);
}

.start-button:active {
    transform: translateY(0) translateX(-50%);
}

.security-text {
    font-size: 0.8em;
    color: var(--whatsapp-text-light);
    opacity: 0.7;
    margin-top: 15px; /* EspaÃ§o acima do texto de seguranÃ§a */
    margin-bottom: 0;
    text-align: center;
    width: 100%;
    box-sizing: border-box;
}


/* Header do Chat */
.chat-header {
    background-color: var(--primary-color);
    color: #fff;
    padding: 15px 20px;
    border-top-left-radius: var(--border-radius-main);
    border-top-right-radius: var(--border-radius-main);
    box-shadow: 0 3px 10px rgba(0, 0, 0, 0.15);
    display: flex;
    align-items: center;
    gap: 15px;
    flex-shrink: 0; /* NÃ£o permite encolher */
}

.bot-info {
    display: flex;
    align-items: center;
    gap: 12px;
}

.bot-avatar {
    width: 48px;
    height: 48px;
    background-color: rgba(255, 255, 255, 0.2);
    border-radius: 50%;
    display: flex;
    justify-content: center;
    align-items: center;
    font-size: 24px;
    color: #fff;
}

.bot-details h1 {
    margin: 0;
    font-size: 1.4em;
    font-weight: 600;
}

.bot-details .status-online, .bot-details .status-typing {
    font-size: 0.85em;
    opacity: 0.9;
    font-weight: 500;
}

.status-online {
    color: #aaffaa; /* Verde claro para online */
}

.status-typing {
    color: #ffffcc; /* Amarelo claro para digitando */
}

/* Mensagens do Chat (Bolhas estilo WhatsApp) */
.chat-messages {
    flex-grow: 1;
    padding: 15px 10px; /* Ajuste para lateral */
    overflow-y: auto;
    background-color: var(--chat-bg-color); /* Fundo do chat */
    display: flex;
    flex-direction: column;
    gap: 8px; /* EspaÃ§amento entre bolhas */
}

/* Scrollbar styling for a cleaner look */
.chat-messages::-webkit-scrollbar {
    width: 8px;
}
.chat-messages::-webkit-scrollbar-track {
    background: var(--chat-bg-color);
}
.chat-messages::-webkit-scrollbar-thumb {
    background-color: #ccd0d4;
    border-radius: 10px;
    border: 2px solid var(--chat-bg-color);
}

.chat-message {
    max-width: 85%; /* Um pouco mais largo */
    padding: 10px 14px;
    border-radius: 10px; /* Cantos arredondados */
    word-wrap: break-word;
    line-height: 1.4;
    font-size: 0.95em;
    box-shadow: 0 1px 2px rgba(0, 0, 0, 0.08);
    position: relative; /* Para o "rabo" da bolha */
    margin-bottom: 5px; /* EspaÃ§o entre a bolha e os botÃµes/prÃ³xima bolha */
}

/* Bolha do bot */
.bot-message {
    background-color: var(--bot-bubble-color); /* Fundo branco */
    color: var(--whatsapp-text-dark);
    align-self: flex-start;
    border-bottom-left-radius: 2px; /* Ajuste para a "cauda" */
}
.bot-message::before {
    content: '';
    position: absolute;
    left: -8px; /* PosiÃ§Ã£o da "cauda" */
    bottom: 0;
    width: 0;
    height: 0;
    border: 8px solid transparent;
    border-bottom-color: var(--bot-bubble-color); /* Cor da bolha */
    border-left-color: var(--bot-bubble-color);
    transform: rotate(45deg);
    box-shadow: 0 1px 2px rgba(0, 0, 0, 0.08); /* Sombra na cauda */
}

/* Bolha do usuÃ¡rio */
.user-message {
    background-color: var(--user-bubble-color); /* Cor verde do WhatsApp */
    color: #fff;
    align-self: flex-end;
    border-bottom-right-radius: 2px; /* Ajuste para a "cauda" */
}
.user-message::before {
    content: '';
    position: absolute;
    right: -8px; /* PosiÃ§Ã£o da "cauda" */
    bottom: 0;
    width: 0;
    height: 0;
    border: 8px solid transparent;
    border-bottom-color: var(--user-bubble-color); /* Cor da bolha */
    border-right-color: var(--user-bubble-color);
    transform: rotate(-45deg);
    box-shadow: 0 1px 2px rgba(0, 0, 0, 0.08); /* Sombra na cauda */
}

/* ContÃªiner dos botÃµes de resposta rÃ¡pida (injetado apÃ³s a mensagem do bot) */
.quick-reply-options {
    display: flex;
    flex-wrap: wrap;
    gap: 8px;
    justify-content: flex-start; /* Alinha Ã  esquerda, como no WhatsApp */
    max-width: 85%; /* Mesma largura das bolhas do bot */
    align-self: flex-start; /* Alinha com as bolhas do bot */
    margin-top: 5px; /* EspaÃ§o entre a bolha e os botÃµes */
    margin-bottom: 15px; /* EspaÃ§o apÃ³s os botÃµes */
}

.quick-reply-button {
    background-color: #f0f0f0; /* Fundo cinza claro */
    color: var(--whatsapp-text-dark);
    border: 1px solid #cccccc;
    padding: 10px 15px;
    border-radius: 20px; /* Arredondado */
    font-size: 0.9em;
    font-weight: 500;
    cursor: pointer;
    transition: background-color 0.2s ease, border-color 0.2s ease, transform 0.1s ease;
    flex-grow: 1; /* Permite que os botÃµes cresÃ§am */
    min-width: 100px; /* Tamanho mÃ­nimo para touch */
    max-width: calc(50% - 4px); /* Duas colunas com espaÃ§amento */
    text-align: center;
}

.quick-reply-button:hover {
    background-color: #e0e0e0;
    border-color: #b3b3b3;
}

.quick-reply-button:active {
    background-color: #d0d0d0;
    transform: translateY(1px); /* Pequeno efeito de clique */
}

/* Mensagem de digitaÃ§Ã£o (simulaÃ§Ã£o) */
.typing-indicator {
    display: flex;
    align-items: center;
    align-self: flex-start;
    background-color: #f0f0f0; /* Fundo claro */
    border-radius: 12px;
    padding: 8px 12px;
    font-size: 0.9em;
    color: #666;
    margin-top: 5px;
    margin-bottom: 5px;
}

.typing-indicator span {
    animation: blink 1s infinite steps(1, start);
    font-weight: 600;
}

@keyframes blink {
    0% { opacity: 0; }
    50% { opacity: 1; }
    100% { opacity: 0; }
}


/* Ãrea de Input de Texto */
.chat-input-area {
    display: flex;
    padding: 12px 15px;
    background-color: #f9f9f9;
    border-top: 1px solid #eee;
    gap: 10px;
    flex-shrink: 0; /* NÃ£o permite encolher */
}

#message-input {
    flex-grow: 1;
    padding: 10px 18px;
    border: 1px solid #ccc;
    border-radius: 25px;
    font-size: 1em;
    outline: none;
    transition: border-color 0.3s ease, box-shadow 0.3s ease;
    -webkit-appearance: none;
    box-sizing: border-box; /* Inclui padding e borda no width/height */
}

#message-input:focus {
    border-color: var(--user-bubble-color);
    box-shadow: 0 0 0 2px rgba(37, 211, 102, 0.2);
}

#message-input:disabled {
    background-color: #e9e9e9;
    cursor: not-allowed;
    opacity: 0.7;
}

#send-button {
    background-color: var(--user-bubble-color);
    color: white;
    border: none;
    border-radius: 50%;
    width: 48px;
    height: 48px;
    min-width: 48px;
    min-height: 48px;
    display: flex;
    justify-content: center;
    align-items: center;
    cursor: pointer;
    transition: background-color 0.3s ease, transform 0.2s ease, box-shadow 0.2s ease;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.2);
    flex-shrink: 0;
}

#send-button:hover {
    background-color: #128c7e;
    transform: translateY(-1px);
}

#send-button:active {
    background-color: #075e54;
    transform: translateY(0);
    box-shadow: 0 1px 4px rgba(0, 0, 0, 0.2);
}

#send-button:disabled {
    background-color: #a0a0a0;
    cursor: not-allowed;
    opacity: 0.7;
}

#send-button svg {
    width: 22px;
    height: 22px;
    transform: rotate(45deg);
}

/* Classes para ocultar/mostrar elementos */
.hidden {
    display: none !important;
}

/* Responsividade para telas menores (celulares) */
@media (max-width: 600px) {
    .chat-container-wrapper {
        border-radius: 0;
        box-shadow: none;
        margin: 0;
    }

    .chat-header {
        border-radius: 0;
        padding: 12px 15px;
    }

    .welcome-screen, .chat-screen {
        padding: 0; /* Removido padding direto aqui, as seÃ§Ãµes internas jÃ¡ tÃªm */
    }

    .bot-avatar {
        width: 40px;
        height: 40px;
        font-size: 20px;
    }

    .bot-details h1 {
        font-size: 1.2em;
    }

    .chat-messages {
        padding: 15px 10px;
        gap: 8px;
    }

    .chat-message {
        padding: 8px 12px;
        font-size: 0.9em;
        max-width: 90%;
    }

    .chat-input-area {
        padding: 8px 10px;
        gap: 8px;
    }

    #message-input {
        padding: 10px 14px;
        font-size: 0.9em;
    }

    #send-button {
        width: 42px;
        height: 42px;
        min-width: 42px;
        min-height: 42px;
    }

    .quick-reply-button {
        font-size: 0.85em;
        padding: 8px 10px;
        max-width: 100%; /* Em telas muito pequenas, um botÃ£o por linha */
    }

    .quick-reply-options {
        max-width: 100%; /* Ocupa a largura total para melhor toque */
        justify-content: center; /* Centraliza os botÃµes */
    }

    /* Ajustes especÃ­ficos para a welcome screen em mobile */
    .welcome-content {
        padding: 15px;
    }
    .welcome-section-1, .welcome-section-2 {
        padding: 15px;
        margin-bottom: 10px;
    }
    .benefit-list {
        margin: 10px 0;
    }
    .benefit-list li {
        padding: 8px 10px;
        font-size: 0.85em;
    }

    .start-button {
        position: static; /* BotÃ£o volta a ser estÃ¡tico no fluxo normal */
        transform: none; /* Remove a transformaÃ§Ã£o de centralizaÃ§Ã£o */
        margin-top: 25px; /* MantÃ©m um espaÃ§amento superior */
        margin-bottom: 0; /* Remove margem inferior extra */
    }

    .secondary-start-button {
        margin-top: 15px; /* Ajusta margem superior */
        max-width: 100%;
    }
}
£o') {
                state.data.recebeBolsaFamiliaCaixaTem = 'nÃ£o';
                // Se nÃ£o recebe Bolsa FamÃ­lia no Caixa Tem, o fluxo encerra
                responseToSend = getRandomResponse('noCaixaTem'); // Usa a mensagem de "noCaixaTem" como encerramento geral
                state.completed = true; 
                simulateTyping(() => addMessageToChat(responseToSend));
            } else {
                state.errorCount++;
                responseToSend = getRandomResponse('invalid'); 
                simulateTyping(() => { addMessageToChat(responseToSend); displayQuickReplyButtons(['Sim', 'NÃ£o']); }); // Repete e mostra botÃµes
            }
            break;

        case 2: // Antigo 'Tem Caixa Tem?' - AGORA OBSOLETO ou Usado para outro benefÃ­cio se o fluxo for alterado
            // LÃ³gica fallback para garantir que o bot nÃ£o trave em um estado inesperado.
            responseToSend = getRandomResponse('errorGeneric');
            state.completed = true;
            hideQuickReplyButtons(); // Esconde tudo
            console.error("Erro de lÃ³gica: Bot atingiu o Case 2 que deveria ser inativo no fluxo atual.");
            simulateTyping(() => addMessageToChat(responseToSend));
            break;

        case 3: // Pergunta: JÃ¡ fez emprÃ©stimo anteriormente? (ESPERA BOTÃES)
            if (cleanedText === 'sim') {
                state.data.emprestimoAnterior = 'sim';
                state.step = 4; // Vai para a pergunta sobre o banco anterior
                responseToSend = getRandomResponse('pedirBancoAntigo');
                simulateTyping(() => { addMessageToChat(responseToSend); hideQuickReplyButtons(); }); // PrÃ³xima Ã© texto livre
            } else if (cleanedText === 'nÃ£o') {
                state.data.emprestimoAnterior = 'nÃ£o';
                state.data.bancoAnterior = 'N/A'; // NÃ£o se aplica
                state.step = 5; // Vai para a pergunta do CPF
                responseToSend = getRandomResponse('pedirCpf');
                simulateTyping(() => { addMessageToChat(responseToSend); hideQuickReplyButtons(); }); // PrÃ³xima Ã© texto livre
            } else {
                state.errorCount++;
                responseToSend = getRandomResponse('invalid');
                simulateTyping(() => { addMessageToChat(responseToSend); displayQuickReplyButtons(['Sim', 'NÃ£o']); }); // Repete e mostra botÃµes
            }
            break;

        case 4: // Pergunta: Qual banco ou financeira anterior? (TEXTO LIVRE)
            if (cleanedText.length < 2 || cleanedText.match(/^(sim|nÃ£o)$/i)) { // ValidaÃ§Ã£o bÃ¡sica para evitar respostas de sim/nÃ£o
                state.errorCount++;
                responseToSend = 'Por favor, digite o *nome* do banco ou financeira onde fez a operaÃ§Ã£o de crÃ©dito anterior. Ex: ItaÃº, Bradesco, etc.';
                simulateTyping(() => addMessageToChat(responseToSend)); // Repete, continua texto livre
            } else if (cleanedText.includes('crefisa') || cleanedText.includes('credifisa') || cleanedText.includes('krefisa')) {
                state.data.bancoAnterior = cleanedText; // Armazena mesmo que seja Crefisa para registro
                responseToSend = getRandomResponse('crefisaReject');
                state.completed = true; // Encerra o fluxo (nÃ£o qualificado)
                simulateTyping(() => addMessageToChat(responseToSend)); // Encerra, nÃ£o mostra botÃµes
            } else {
                state.data.bancoAnterior = cleanedText;
                state.step = 5; // Vai para a pergunta do CPF
                responseToSend = getRandomResponse('pedirCpf');
                simulateTyping(() => { addMessageToChat(responseToSend); hideQuickReplyButtons(); }); // PrÃ³xima Ã© texto livre
            }
            break;

        case 5: // Pergunta: Pedir CPF (TEXTO LIVRE)
            const cpfInput = cleanedText.replace(/\D/g, ''); // Remove caracteres nÃ£o numÃ©ricos

            if (!isValidCPF(cpfInput)) { // Usa apenas a validaÃ§Ã£o local
                state.errorCount++;
                responseToSend = getRandomResponse('cpfInvalid');
                simulateTyping(() => addMessageToChat(responseToSend)); // Repete, continua texto livre
            } else {
                state.data.cpf = cpfInput;
                state.data.cpfStatus = 'VALIDATED_LOCALLY'; // Define um status claro para validaÃ§Ã£o local
                state.errorCount = 0; // Reseta erros apÃ³s sucesso
                state.step = 6; // Vai para a pergunta do WhatsApp
                responseToSend = getRandomResponse('pedirWhatsapp');
                simulateTyping(() => { addMessageToChat(responseToSend); hideQuickReplyButtons(); }); // PrÃ³xima Ã© texto livre
            }
            break;

        case 6: // Pergunta: Pedir WhatsApp e finalizar o fluxo (TEXTO LIVRE)
            const whatsappInput = cleanedText.replace(/\D/g, ''); // Remove nÃ£o-dÃ­gitos

            // ValidaÃ§Ã£o bÃ¡sica do nÃºmero de WhatsApp (10 ou 11 dÃ­gitos, apenas nÃºmeros)
            if (whatsappInput.length < 10 || whatsappInput.length > 11 || !/^\d+$/.test(whatsappInput)) {
                state.errorCount++;
                responseToSend = getRandomResponse('whatsappInvalid');
                simulateTyping(() => addMessageToChat(responseToSend)); // Repete, continua texto livre
            } else {
                state.data.whatsapp = whatsappInput;
                
                // CRITÃRIOS DE QUALIFICAÃÃO ANTES DE ENVIAR PARA O TELEGRAM:
                // Ã qualificado se recebeu Bolsa FamÃ­lia no Caixa Tem (que Ã© a condiÃ§Ã£o inicial),
                // e nÃ£o mencionou Crefisa no banco anterior, e CPF validado localmente.
                // A condiÃ§Ã£o "recebeBolsaFamiliaCaixaTem === 'sim'" jÃ¡ filtra no step 1.
                const isQualified = (state.data.recebeBolsaFamiliaCaixaTem === 'sim') &&
                                    (!state.data.bancoAnterior || !state.data.bancoAnterior.toLowerCase().includes('crefisa')) &&
                                    (state.data.cpfStatus === 'VALIDATED_LOCALLY'); 

                if (isQualified) {
                    // Adiciona mensagem de "enviando..." e depois o resultado
                    simulateTyping(() => {
                        addMessageToChat('â Dados coletados! Enviando para nossa equipe...');
                        // Pequeno atraso antes de chamar a funÃ§Ã£o para enviar para o Telegram
                        setTimeout(async () => {
                            try {
                                const res = await fetch('/.netlify/functions/sendToTelegram', {
                                    method: 'POST',
                                    headers: { 'Content-Type': 'application/json' },
                                    body: JSON.stringify({ leadData: state.data })
                                });
                                const result = await res.json();

                                if (result.success) {
                                    simulateTyping(() => addMessageToChat(getRandomResponse('finalSuccess')));
                                    // Dispara evento Lead do Facebook Pixel
                                    if (typeof fbq === 'function') {
                                        fbq('track', 'Lead', {
                                            content_name: 'Lead Qualificado Bolsa Familia',
                                            content_category: 'Lead Generation',
                                            value: 1, // Ou um valor monetÃ¡rio, se aplicÃ¡vel
                                            currency: 'BRL'
                                        });
                                    }
                                } else {
                                    simulateTyping(() => addMessageToChat(getRandomResponse('errorGeneric'))); // Erro no envio para Telegram
                                    console.error('Erro ao enviar lead para Telegram:', result.message);
                                }
                            } catch (error) {
                                console.error('Erro ao chamar Netlify Function para Telegram:', error);
                                simulateTyping(() => addMessageToChat(getRandomResponse('errorGeneric')));
                            }
                        }, 1000); // Atraso para a chamada da API
                    }, 500, 1000); // Atraso de digitaÃ§Ã£o para a mensagem "enviando..."
                } else {
                    // O lead nÃ£o atendeu aos critÃ©rios de qualificaÃ§Ã£o (ex: nÃ£o tem Caixa Tem ou Ã© Crefisa)
                    console.log("Lead nÃ£o qualificado. NÃ£o enviado para o Telegram.");
                    responseToSend = "Sua solicitaÃ§Ã£o foi processada. Em breve, entraremos em contato se houver uma oportunidade adequada ao seu perfil.";
                    simulateTyping(() => addMessageToChat(responseToSend));
                }
                state.completed = true; // Finaliza o fluxo
            }
            break;

        default:
            // Este caso sÃ³ deve acontecer se 'state.step' for um valor inesperado (ex: 0 apÃ³s o inÃ­cio)
            // Ou se o chat comeÃ§ar sem o clique no botÃ£o (o que nÃ£o deve acontecer agora)
            responseToSend = 'Desculpe, nÃ£o entendi. Por favor, digite *iniciar* para recomeÃ§ar.';
            state.errorCount++;
            simulateTyping(() => addMessageToChat(responseToSend));
            break;
    }

    // Salva o estado atual no localStorage para persistÃªncia (se o usuÃ¡rio recarregar a pÃ¡gina)
    localStorage.setItem('chatbotState', JSON.stringify(state));
}

// ==================================================
// Event Listeners e InicializaÃ§Ã£o
// ==================================================

// Evento de clique no botÃ£o de iniciar conversa na tela de boas-vindas
startButton.addEventListener('click', startChatFlow);
// NOVO: Listener para o botÃ£o secundÃ¡rio na welcome screen
secondaryStartButton.addEventListener('click', startChatFlow);

// Evento de clique nos botÃµes de resposta rÃ¡pida (Sim/NÃ£o)
// O listener Ã© adicionado ao chatContainer para capturar cliques nos botÃµes que sÃ£o adicionados dinamicamente
chatContainer.addEventListener('click', (event) => {
    // Verifica se o clique foi em um botÃ£o com a classe 'quick-reply-button'
    if (event.target.classList.contains('quick-reply-button')) {
        const value = event.target.dataset.value; // Pega o valor do atributo data-value (sim ou nÃ£o)
        // O `closest` garante que o botÃ£o clicado estÃ¡ dentro de um contÃªiner de quick-reply-options
        if (event.target.closest('.quick-reply-options')) {
            // Remove os botÃµes antigos antes de processar a resposta
            const currentButtonsWrapper = event.target.closest('.quick-reply-options');
            if (currentButtonsWrapper) {
                currentButtonsWrapper.remove(); // Remove o wrapper dos botÃµes
            }
            processUserMessage(value); // Simula a mensagem do usuÃ¡rio com o valor do botÃ£o
        }
    }
});

// Evento de clique no botÃ£o de enviar mensagem (para input de texto livre)
sendButton.addEventListener('click', () => {
    if (messageInput.value.trim() !== '') {
        processUserMessage(messageInput.value);
    }
});

// Evento de tecla (Enter) no input de mensagem (para input de texto livre)
messageInput.addEventListener('keypress', (e) => {
    if (e.key === 'Enter' && messageInput.value.trim() !== '') {
        processUserMessage(messageInput.value);
    }
});

// Ao carregar a pÃ¡gina, decide qual tela mostrar (boas-vindas ou chat)
document.addEventListener('DOMContentLoaded', () => {
    const savedState = localStorage.getItem('chatbotState');

    if (savedState) {
        state = JSON.parse(savedState);
        // Verifica se a sessÃ£o expirou ou se o fluxo foi concluÃ­do
        if (state.completed || (Date.now() - state.lastInteraction > (30 * 60 * 1000))) { // 30 minutos de inatividade
            // Se expirou ou concluiu, mostra a tela de boas-vindas novamente, resetando o estado
            welcomeScreen.classList.add('active');
            chatScreen.classList.add('hidden');
            state = { step: 0, data: {}, errorCount: 0, completed: false, lastInteraction: Date.now() };
            localStorage.removeItem('chatbotState'); // Limpa o estado salvo
        } else {
            // Se hÃ¡ um estado salvo e nÃ£o expirado, vai direto para a tela do chat
            welcomeScreen.classList.add('hidden');
            chatScreen.classList.add('active');
            addMessageToChat('Bem-vindo(a) de volta! ð');
            // Repete a Ãºltima pergunta ou a mensagem inicial do chat
            let currentStepQuestionKey;
            // A lÃ³gica aqui precisa ser mais robusta se o usuÃ¡rio puder estar em qualquer step e vocÃª quer
            // exibir os botÃµes adequados na recarga.
            // Como apenas os steps 1 e 3 usam botÃµes no fluxo principal, podemos fazer assim:
            if ([1, 3].includes(state.step)) {
                switch (state.step) {
                    case 1: currentStepQuestionKey = 'recebeBolsaFamiliaCaixaTem'; break;
                    case 3: currentStepQuestionKey = 'jaFezEmprestimo'; break;
                }
                simulateTyping(() => {
                    addMessageToChat(getRandomResponse(currentStepQuestionKey));
                    displayQuickReplyButtons(['Sim', 'NÃ£o']);
                });
            } else if ([4, 5, 6].includes(state.step)) {
                // Para steps de texto livre, apenas re-exibe a pergunta
                switch (state.step) {
                    case 4: currentStepQuestionKey = 'pedirBancoAntigo'; break;
                    case 5: currentStepQuestionKey = 'pedirCpf'; break;
                    case 6: currentStepQuestionKey = 'pedirWhatsapp'; break;
                }
                simulateTyping(() => {
                    addMessageToChat(getRandomResponse(currentStepQuestionKey));
                    hideQuickReplyButtons(); // Garante que o input de texto esteja visÃ­vel
                });
            } else { // Fallback para estados inesperados ou inÃ­cio do fluxo (step 0)
                 currentStepQuestionKey = 'recebeBolsaFamiliaCaixaTem';
                 simulateTyping(() => {
                    addMessageToChat(getRandomResponse(currentStepQuestionKey));
                    displayQuickReplyButtons(['Sim', 'NÃ£o']);
                 });
            }
        }
    } else {
        // Se nÃ£o hÃ¡ estado salvo, mostra a tela de boas-vindas por padrÃ£o
        welcomeScreen.classList.add('active');
        chatScreen.classList.add('hidden');
    }
});

